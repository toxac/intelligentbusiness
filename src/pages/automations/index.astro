---
// src/pages/automations/index.astro
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Fetch all automation entries
const automations = await getCollection('automations');

// Sort by featured first, then by creation date
const sortedAutomations = automations.sort((a, b) => {
  if (a.data.featured && !b.data.featured) return -1;
  if (!a.data.featured && b.data.featured) return 1;
  return (b.data.createdAt || new Date(0)).getTime() - (a.data.createdAt || new Date(0)).getTime();
});

// Define categories and types
const automationCategories = {
  'sales-marketing': [
    'lead-management',
    'customer-communication',
    'content-social-media',
    'data-synchronization',
    'post-purchase'
  ],
  'operations-it': [
    'internal-workflow',
    'data-reporting',
    'system-monitoring',
    'document-processing'
  ],
  'customer-service': [
    'ticket-management',
    'customer-feedback',
    'chatbot-ai-support',
    'alerts-notifications'
  ],
  'hr-finance': [
    'hr-processes',
    'financial-processes',
    'payroll'
  ],
  'ai-intelligent': [
    'content-generation',
    'sentiment-analysis',
    'document-classification',
    'data-enrichment'
  ]
};

// Format category names for display
const formatCategoryName = (category: string) => {
  return category.split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
};

// Format type names for display
const formatTypeName = (type: string) => {
  return type.split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
};

// Get badge color based on category
const getCategoryBadgeClass = (category: string) => {
  switch(category) {
    case 'sales-marketing':
      return 'badge-primary';
    case 'operations-it':
      return 'badge-secondary';
    case 'customer-service':
      return 'badge-accent';
    case 'hr-finance':
      return 'badge-info';
    case 'ai-intelligent':
      return 'badge-success';
    default:
      return 'badge-neutral';
  }
};
---

<Layout title="Automations" description="Browse our collection of workflow automations">
  <div class="container mx-auto px-4 py-8">
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold text-dark mb-4">Workflow Automations</h1>
      <p class="text-xl text-gray-600 max-w-2xl mx-auto">Streamline your processes with our collection of pre-built automations that save time and reduce errors.</p>
    </div>

    <div class="flex justify-between items-center mb-6">
      <h2 class="text-2xl font-semibold">All Automations ({automations.length})</h2>
      <div class="flex gap-2 flex-wrap">
        {Object.keys(automationCategories).map(category => (
          <a 
            href={`/automations/category/${category}`} 
            class="btn btn-outline btn-sm"
          >
            {formatCategoryName(category)}
          </a>
        ))}
      </div>
    </div>

    <ul class="list bg-base-100 rounded-box shadow-md">
      <li class="p-4 pb-2 text-xs opacity-60 tracking-wide">All available automations</li>
      
      {sortedAutomations.map(automation => (
        <li class="list-row">
          <div>
            <span class={`badge badge-sm ${getCategoryBadgeClass(automation.data.category)}`}>
              {formatCategoryName(automation.data.category)}
            </span>
          </div>
          <div>
            <div class="font-semibold">{automation.data.name}</div>
            <div class="text-xs uppercase font-semibold opacity-60">
              {automation.data.types.map(type => formatTypeName(type)).join(', ')}
            </div>
          </div>
          <div class="flex flex-wrap gap-1">
            {automation.data.integrations?.map(integration => (
              <span class="badge badge-outline badge-xs">{integration}</span>
            ))}
          </div>
          <a href={`/automations/${automation.slug}`} class="btn btn-square btn-ghost">
            <svg class="size-[1.2em]" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
              <g stroke-linejoin="round" stroke-linecap="round" stroke-width="2" fill="none" stroke="currentColor">
                <path d="M9 18l6-6-6-6"></path>
              </g>
            </svg>
          </a>
        </li>
      ))}
    </ul>

    <!-- Categories Section -->
    <div class="mt-12">
      <h2 class="text-2xl font-bold text-dark mb-6">Browse by Category</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4">
        {Object.entries(automationCategories).map(([category, types]) => {
          const categoryAutomations = automations.filter(a => a.data.category === category);
          const iconClass = category === 'sales-marketing' ? 'fa-bullhorn' :
                           category === 'operations-it' ? 'fa-server' :
                           category === 'customer-service' ? 'fa-headset' :
                           category === 'hr-finance' ? 'fa-file-invoice-dollar' :
                           'fa-robot';
          const iconColor = category === 'sales-marketing' ? 'text-purple-600' :
                           category === 'operations-it' ? 'text-blue-600' :
                           category === 'customer-service' ? 'text-green-600' :
                           category === 'hr-finance' ? 'text-yellow-600' :
                           'text-teal-600';
          const bgColor = category === 'sales-marketing' ? 'bg-purple-100' :
                         category === 'operations-it' ? 'bg-blue-100' :
                         category === 'customer-service' ? 'bg-green-100' :
                         category === 'hr-finance' ? 'bg-yellow-100' :
                         'bg-teal-100';
          
          return (
            <a 
              href={`/automations/category/${category}`} 
              class="bg-white p-6 rounded-xl shadow-sm text-center hover:shadow-md transition"
            >
              <div class={`${bgColor} w-14 h-14 rounded-full flex items-center justify-center mx-auto mb-4`}>
                <i class={`fas ${iconClass} ${iconColor} text-xl`}></i>
              </div>
              <h3 class="font-medium text-dark">{formatCategoryName(category)}</h3>
              <p class="text-sm text-gray-600 mt-1">{categoryAutomations.length} automations</p>
              
              <div class="mt-4 text-left">
                <p class="text-xs font-semibold text-gray-500 mb-1">Common types:</p>
                <div class="flex flex-wrap gap-1 justify-center">
                  {types.slice(0, 3).map(type => (
                    <span class="badge badge-outline badge-xs">{formatTypeName(type)}</span>
                  ))}
                  {types.length > 3 && (
                    <span class="badge badge-ghost badge-xs">+{types.length - 3} more</span>
                  )}
                </div>
              </div>
            </a>
          );
        })}
      </div>
    </div>
  </div>
</Layout>

