---
// src/pages/automations/[slug].astro
import Layout from '../../../layouts/Layout.astro';
import { getEntry, render } from 'astro:content';

// Get the slug from the URL params
const { slug } = Astro.params;
if (slug === undefined) {
  return Astro.redirect("/404");
}

const automation = await getEntry('automations', slug);
if (automation === undefined) {
  return Astro.redirect("/404");
}

const { Content } = await render(automation);

---

<Layout title={automation.data.name} description={`Details about the ${automation.data.name} automation`}>
    <div
  class="main-content mx-auto prose xl:prose-lg max-w-4xl dark:prose-invert dark:prose-headings:text-slate-300 prose-md prose-headings:font-heading prose-headings:leading-tighter prose-headings:tracking-tighter prose-headings:font-bold prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-img:rounded-md prose-img:shadow-lg mt-8"
>
      <div class="bg-white rounded-xl shadow-md overflow-hidden">
        <div class="p-8">
          <div class="flex flex-wrap gap-2 mb-4">
            <span class="bg-purple-100 text-purple-800 text-xs font-medium px-2.5 py-0.5 rounded">{automation.data.category}</span>
            {automation.data.types.map(type => (
              <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded">{type}</span>
            ))}
            {automation.data.featured && (
              <span class="bg-yellow-100 text-yellow-800 text-xs font-medium px-2.5 py-0.5 rounded">Featured</span>
            )}
          </div>
          
          <h1 class="text-3xl font-bold text-dark mb-4">{automation.data.name}</h1>
          
          <div class="prose max-w-none mb-6">
            <slot />
          </div>
          
          <div class="border-t border-gray-200 pt-6 mt-6">
            <h2 class="text-xl font-semibold mb-4">Workflow Details</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 class="font-medium text-gray-700 mb-2">Trigger Node</h3>
                <p class="text-dark">{automation.data.triggerNode}</p>
              </div>
              <div>
                <h3 class="font-medium text-gray-700 mb-2">Nodes</h3>
                <div class="flex flex-wrap gap-2">
                  {automation.data.nodes.map(node => (
                    <span class="bg-gray-100 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded">{node}</span>
                  ))}
                </div>
              </div>
              <div>
                <h3 class="font-medium text-gray-700 mb-2">Integrations</h3>
                <div class="flex flex-wrap gap-2">
                  {automation.data.integrations?.map(integration => (
                    <span class="bg-gray-100 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded">{integration}</span>
                  ))}
                </div>
              </div>
              <div>
                <h3 class="font-medium text-gray-700 mb-2">Workflow File</h3>
                <a href={automation.data.workflowFile} class="text-primary hover:text-secondary font-medium break-all">
                  {automation.data.workflowFile}
                </a>
              </div>
            </div>
          </div>
          <Content />
          
          <div class="border-t border-gray-200 pt-6 mt-6">
            <a href="/automations" class="text-primary hover:text-secondary font-medium flex items-center">
              <i class="fas fa-arrow-left mr-2 text-xs"></i> Back to Automations
            </a>
          </div>
        </div>
      </div>
    </div>

</Layout>